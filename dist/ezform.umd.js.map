{"version":3,"file":"ezform.umd.js","sources":["../src/ezform.js"],"sourcesContent":["import React from \"react\";\nconst h = React.createElement;\nconst iClass = \"custom-control-input\";\nconst lClass = \"custom-control-label\";\nconst gClass = \"form-group\";\nconst cClass = \"form-control\";\nconst bClass = \"btn btn-primary\";\n\nconst parseFormInputs = ({ elements }) => {\n  const result = {};\n  for (const { type, name, checked, selectedOptions, value } of elements) {\n    if (type === \"select-multiple\") {\n      result[name] = [];\n      for (const { value } of selectedOptions) result[name].push(value);\n    } else if (type === \"checkbox\") {\n      if (!result[name]) result[name] = [];\n      if (checked) result[name].push(value);\n    } else if (type !== \"submit\" && (!(type === \"radio\") || checked)) {\n      result[name] = value;\n    }\n  }\n  return result;\n};\n\nconst omit = (fields) => (obj) =>\n  Object.fromEntries(\n    Object.entries(obj).filter(([key]) => !fields.includes(key))\n  );\n\nconst fromExtraTerse = (field) => {\n  let f = field;\n  if (typeof f === \"string\") return { ezTitle: f };\n  if (Array.isArray(f)) f = { ezTitle: f[0], children: f[1] };\n  if (Array.isArray(f.children))\n    return {\n      ...f,\n      children: f.children.map((option) =>\n        typeof option === \"string\" ? { label: option } : option\n      ),\n    };\n  return f;\n};\n\n/**\n * @typedef ezFormFactory\n * @function\n * @param {function} h createElement function (eg. React.createElement)\n * @return {{Form: function(Object): Array<Array<T>| T>, push: function(Array<T>, T): Array<T>}} an object containing the functions to manage the queue\n */\n\n/** @type {SharedLib.PriorityQueueFactory} */\n//const ezForm = (h, { idPrefix = \"\" } = {}) => {\n//const idP = idPrefix;\nconst FormGroup = ({ children, ...props }) =>\n  h(\"div\", { className: gClass, ...props }, ...children);\n\nconst TickBox = ({ type, name, id, label, value = label, ...props }) => {\n  const className = `custom-control custom-${type} custom-control-inline`;\n  return h(\n    \"div\",\n    { className, key: id },\n    h(\"input\", { id, name, className: iClass, type, value, ...props }),\n    h(\"label\", { htmlFor: id, className: lClass }, label)\n  );\n};\n\nconst TickBoxes = ({ type, name, idP, key, label, children, ...props }) => {\n  type = type || \"checkbox\";\n  const xChildren = children.map((cProps, i) =>\n    TickBox({ type, name, ...props, id: idP + name + \"_\" + i, ...cProps })\n  );\n\n  return FormGroup({\n    key,\n    children: [label && h(\"label\", null, label), h(\"div\", null, ...xChildren)],\n  });\n};\n\nconst SelectBox = ({ name, idP, key, label, children, ...props }) => {\n  delete props.type;\n  const xChildren = children.map(({ label, value = label, ...cProps }, i) => {\n    const id = idP + name + \"_\" + i;\n    return h(\"option\", { id, key: id, value, ...cProps }, label);\n  });\n\n  return FormGroup({\n    key,\n    children: [\n      label && h(\"label\", { htmlFor: props.id }, label),\n      h(\"select\", { name, ...props }, ...xChildren),\n    ],\n  });\n};\n\nconst inferType = (name) => {\n  name = name.toLowerCase();\n  const types = [\"number\", \"email\", \"textarea\", \"submit\"];\n  return types.find((v) => name.includes(v)) || \"text\";\n};\n/** This is a description of the Text function. */\nconst Text = ({ name, type = inferType(name), key, label, ...props }) => {\n  //type = type || inferType(name);\n  const children =\n    type === \"submit\"\n      ? [\n          h(\"input\", {\n            type,\n            name,\n            ...props,\n            value: label,\n            className: bClass,\n          }),\n        ]\n      : [\n          label && h(\"label\", { htmlFor: props.id }, label),\n          type === \"textarea\"\n            ? h(\"textarea\", { name, ...omit([\"value\"])(props) }, props.value)\n            : h(\"input\", { type, name, ...props }),\n        ];\n  return FormGroup({ key, children });\n};\n\n/**\n * High level user input field inc optional label, multiple options etc\n * @function ezField~Field\n * @param {Object} f field proerties\n * @param {Object} [f.ezState] container for properties for intermediate values\n * @param {string} [f.ezTitle] meaningful title for field\n * @param {string} [f.type] html input type plus \"select-multiple\"\n * @param {string[]} [f.options] options for checkbox, radio, select and select-multiple types\n * @param {string} [f.label = f.ezTitle] label element\n * @param {string} [f.placeholder = f.ezTitle] placeholder property\n * @param {string} [f.name] name property - defaults to ezTitle or placeholder snake-cased\n * @return {Object} vnode with optional label\n *\n * @example Field({placeholder: email})\n *\n */\nconst Field = ({\n  ezTitle,\n  ezState,\n  label = ezTitle,\n  placeholder = ezTitle,\n  name = (ezTitle || placeholder).replace(/ /g, \"_\").toLowerCase(),\n  idP = \"\",\n  id = idP + name,\n  key = id,\n  children,\n  ...props\n}) => {\n  if (ezState && !props.value) props.value = ezState[name] || \"\";\n  const className = cClass;\n  const derivedProps = { ...props, label, key, id, name, idP };\n  if (children) {\n    return props.type === \"select\"\n      ? SelectBox({ ...derivedProps, children, className })\n      : TickBoxes({ ...derivedProps, children });\n  } else {\n    return Text({ ...derivedProps, placeholder, className });\n  }\n};\n\n/**\n * Creates form element\n * @param {function} onSubmit callback\n * @return {string} A good string\n *\n * @example\n *\n *     <Form onSubmit={({email}) => console.log({email})}>\n *        <Field\n */\n\nconst Form = ({ onSubmit, ...props }) => {\n  if (onSubmit)\n    props.onSubmit = (e) => {\n      e.preventDefault();\n      onSubmit(parseFormInputs(e.target));\n    };\n  return h(\"form\", props);\n};\n\nexport { Field, Form, fromExtraTerse, parseFormInputs };\n"],"names":["h","createElement","parseFormInputs","result","elements","type","name","checked","selectedOptions","value","push","FormGroup","children","props","className","ezTitle","ezState","label","placeholder","replace","toLowerCase","idP","id","key","derivedProps","xChildren","map","i","cProps","htmlFor","SelectBox","TickBox","TickBoxes","fields","find","v","includes","inferType","obj","Object","fromEntries","entries","filter","Text","onSubmit","e","preventDefault","target","field","f","Array","isArray","option"],"mappings":"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"}