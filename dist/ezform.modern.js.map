{"version":3,"file":"ezform.modern.js","sources":["../src/ezform.js"],"sourcesContent":["import React from \"react\";\nconst h = React.createElement;\nconst iClass = \"custom-control-input\";\nconst lClass = \"custom-control-label\";\nconst gClass = \"form-group\";\nconst cClass = \"form-control\";\nconst bClass = \"btn btn-primary\";\n\nconst parseFormInputs = ({ elements }) => {\n  const result = {};\n  for (const { type, name, checked, selectedOptions, value } of elements) {\n    if (type === \"select-multiple\") {\n      result[name] = [];\n      for (const { value } of selectedOptions) result[name].push(value);\n    } else if (type === \"checkbox\") {\n      if (!result[name]) result[name] = [];\n      if (checked) result[name].push(value);\n    } else if (type !== \"submit\" && (!(type === \"radio\") || checked)) {\n      result[name] = value;\n    }\n  }\n  return result;\n};\n\nconst omit = (fields) => (obj) =>\n  Object.fromEntries(\n    Object.entries(obj).filter(([key]) => !fields.includes(key))\n  );\n\nconst fromExtraTerse = (field) => {\n  let f = field;\n  if (typeof f === \"string\") return { ezTitle: f };\n  if (Array.isArray(f)) f = { ezTitle: f[0], children: f[1] };\n  if (Array.isArray(f.children))\n    return {\n      ...f,\n      children: f.children.map((option) =>\n        typeof option === \"string\" ? { label: option } : option\n      ),\n    };\n  return f;\n};\n\n/**\n * @typedef ezFormFactory\n * @function\n * @param {function} h createElement function (eg. React.createElement)\n * @return {{Form: function(Object): Array<Array<T>| T>, push: function(Array<T>, T): Array<T>}} an object containing the functions to manage the queue\n */\n\n/** @type {SharedLib.PriorityQueueFactory} */\n//const ezForm = (h, { idPrefix = \"\" } = {}) => {\n//const idP = idPrefix;\nconst FormGroup = ({ children, ...props }) =>\n  h(\"div\", { className: gClass, ...props }, ...children);\n\nconst TickBox = ({ type, name, id, label, value = label, ...props }) => {\n  const className = `custom-control custom-${type} custom-control-inline`;\n  return h(\n    \"div\",\n    { className, key: id },\n    h(\"input\", { id, name, className: iClass, type, value, ...props }),\n    h(\"label\", { htmlFor: id, className: lClass }, label)\n  );\n};\n\nconst TickBoxes = ({ type, name, idP, key, label, children, ...props }) => {\n  type = type || \"checkbox\";\n  const xChildren = children.map((cProps, i) =>\n    TickBox({ type, name, ...props, id: idP + name + \"_\" + i, ...cProps })\n  );\n\n  return FormGroup({\n    key,\n    children: [label && h(\"label\", null, label), h(\"div\", null, ...xChildren)],\n  });\n};\n\nconst SelectBox = ({ name, idP, key, label, children, ...props }) => {\n  delete props.type;\n  const xChildren = children.map(({ label, value = label, ...cProps }, i) => {\n    const id = idP + name + \"_\" + i;\n    return h(\"option\", { id, key: id, value, ...cProps }, label);\n  });\n\n  return FormGroup({\n    key,\n    children: [\n      label && h(\"label\", { htmlFor: props.id }, label),\n      h(\"select\", { name, ...props }, ...xChildren),\n    ],\n  });\n};\n\nconst inferType = (name) => {\n  name = name.toLowerCase();\n  const types = [\"number\", \"email\", \"textarea\", \"submit\"];\n  return types.find((v) => name.includes(v)) || \"text\";\n};\n/** This is a description of the Text function. */\nconst Text = ({ name, type = inferType(name), key, label, ...props }) => {\n  //type = type || inferType(name);\n  const children =\n    type === \"submit\"\n      ? [\n          h(\"input\", {\n            type,\n            name,\n            ...props,\n            value: label,\n            className: bClass,\n          }),\n        ]\n      : [\n          label && h(\"label\", { htmlFor: props.id }, label),\n          type === \"textarea\"\n            ? h(\"textarea\", { name, ...omit([\"value\"])(props) }, props.value)\n            : h(\"input\", { type, name, ...props }),\n        ];\n  return FormGroup({ key, children });\n};\n\n/**\n * High level user input field inc optional label, multiple options etc\n * @function ezField~Field\n * @param {Object} f field proerties\n * @param {Object} [f.ezState] container for properties for intermediate values\n * @param {string} [f.ezTitle] meaningful title for field\n * @param {string} [f.type] html input type plus \"select-multiple\"\n * @param {string[]} [f.options] options for checkbox, radio, select and select-multiple types\n * @param {string} [f.label = f.ezTitle] label element\n * @param {string} [f.placeholder = f.ezTitle] placeholder property\n * @param {string} [f.name] name property - defaults to ezTitle or placeholder snake-cased\n * @return {Object} vnode with optional label\n *\n * @example Field({placeholder: email})\n *\n */\nconst Field = ({\n  ezTitle,\n  ezState,\n  label = ezTitle,\n  placeholder = ezTitle,\n  name = (ezTitle || placeholder).replace(/ /g, \"_\").toLowerCase(),\n  idP = \"\",\n  id = idP + name,\n  key = id,\n  children,\n  ...props\n}) => {\n  if (ezState && !props.value) props.value = ezState[name] || \"\";\n  const className = cClass;\n  const derivedProps = { ...props, label, key, id, name, idP };\n  if (children) {\n    return props.type === \"select\"\n      ? SelectBox({ ...derivedProps, children, className })\n      : TickBoxes({ ...derivedProps, children });\n  } else {\n    return Text({ ...derivedProps, placeholder, className });\n  }\n};\n\n/**\n * Creates form element\n * @param {function} onSubmit callback\n * @return {string} A good string\n *\n * @example\n *\n *     <Form onSubmit={({email}) => console.log({email})}>\n *        <Field\n */\n\nconst Form = ({ onSubmit, ...props }) => {\n  if (onSubmit)\n    props.onSubmit = (e) => {\n      e.preventDefault();\n      onSubmit(parseFormInputs(e.target));\n    };\n  return h(\"form\", props);\n};\n\nexport { Field, Form, fromExtraTerse, parseFormInputs };\n"],"names":["h","React","createElement","parseFormInputs","elements","result","type","name","checked","selectedOptions","value","push","fromExtraTerse","field","f","ezTitle","Array","isArray","children","map","option","label","FormGroup","props","className","inferType","toLowerCase","find","v","includes","Field","ezState","placeholder","replace","idP","id","key","derivedProps","xChildren","cProps","i","htmlFor","SelectBox","TickBox","TickBoxes","fields","obj","Object","fromEntries","entries","filter","Text","Form","onSubmit","e","preventDefault","target"],"mappings":"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"}