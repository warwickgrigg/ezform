{"version":3,"file":"ezform.modern.js","sources":["../src/ezform.js"],"sourcesContent":["/** @module ezform */\n\nimport React from \"react\";\n\n//import { useState } from \"react\";\nconst h = React.createElement;\nconst gClass = \"form-group\";\nconst bClass = \"btn btn-primary\";\nconst cClass = \"form-control\"; // input, select, textarea\nconst checkClass = \"form-check form-check-inline\";\nconst checkiClass = \"form-check-input\";\nconst checklClass = \"form-check-label\";\n//const iClass = \"custom-control-input\";\n//const lClass = \"custom-control-label\";\n//const checkClass = \"custom-control custom-checkbox custom-control-inline\";\n//const radioClass = \"custom-control custom-radio custom-control-inline\";\n\n/*\nconst omit = (fields) => (obj) =>\n  Object.fromEntries(\n    Object.entries(obj).filter(([key]) => !fields.includes(key))\n  );\n*/\n\nconst FormGroup = ({ children, ...props }) =>\n  h(\"div\", { className: gClass, ...props }, ...children);\n\nconst TickBox = ({ type, name, id, label, value = label, ...props }) => {\n  //const className = `custom-control custom-${type} custom-control-inline`;\n  return h(\n    \"div\",\n    { className: checkClass, key: id },\n    h(\"input\", { id, name, className: checkiClass, type, value, ...props }),\n    h(\"label\", { htmlFor: id, className: checklClass }, label)\n  );\n};\n\nconst TickBoxes = ({ type, name, id, key, label, options, ...p }) => {\n  type = type || \"checkbox\";\n  const xChildren = options.map((cProps, i) =>\n    TickBox({ type, name, ...p, id: id + \"_\" + i, ...cProps })\n  );\n\n  return FormGroup({\n    key,\n    children: [label && h(\"label\", null, label), h(\"div\", null, ...xChildren)],\n  });\n};\n\nconst SelectBox = ({ name, key, label, options, ...props }) => {\n  delete props.type;\n  const xChildren = options.map(({ label, value = label, ...cProps }, i) => {\n    const id = props.id + \"_\" + i;\n    return h(\"option\", { id, key: id, value, ...cProps }, label);\n  });\n\n  return FormGroup({\n    key,\n    children: [\n      label && h(\"label\", { htmlFor: props.id }, label),\n      h(\"select\", { name, ...props }, ...xChildren),\n    ],\n  });\n};\n\nconst inferType = (name) => {\n  name = name.toLowerCase();\n  const types = [\"number\", \"email\", \"textarea\", \"submit\"];\n  return types.find((v) => name.includes(v)) || \"text\";\n};\n\nconst Text = ({ name, type = inferType(name), key, label, ...props }) => {\n  //type = type || inferType(name);\n  const children =\n    type === \"submit\"\n      ? [h(\"input\", { type, name, ...props, value: label, className: bClass })]\n      : [\n          label && h(\"label\", { htmlFor: props.id }, label),\n          type === \"textarea\"\n            ? //? h(\"textarea\", { name, ...omit([\"value\"])(props) }, props.value)\n              h(\"textarea\", { name, ...props })\n            : h(\"input\", { type, name, ...props }),\n        ];\n  return FormGroup({ key, children });\n};\n\n/**\n * High level user input field inc optional label, multiple options etc\n * @param {Object} f field proerties\n * @param {string} [f.ezTitle] meaningful title for field\n * @param {string} [f.label = f.ezTitle] label element\n * @param {string} [f.placeholder = f.ezTitle] placeholder property\n * @param {string} [f.name] name property - defaults to ezTitle or placeholder snake-cased\n * @param {string} [f.prefix = \"\"] id prefix (eg. for use if >=2 forms on page)\n * @param {string} [f.id = f.prefix + f.name] id for input/textarea; number will be suffixed  for options' ids\n * @param {string} [f.type] html input type or \"textarea\"\n * @param {Object[]} [f.options] array of options' attributes for checkbox, radio and select\n * @param {Object} [f.values] container for a controlled form's input values\n * @param {Object} [f....props] other dom/vdom/react attributes\n * @return {Object} vnode with optional label\n *\n * @example Field({placeholder: \"email\"})\n *\n * @example Field({placeholder: \"email\", style:{color: red}})\n *\n * @example <Field placeholder=\"email\"></Field>\n *\n */\nconst Field = ({\n  ezTitle,\n  label = ezTitle,\n  placeholder = ezTitle,\n  name = (ezTitle || placeholder).replace(/ /g, \"_\").toLowerCase(),\n  prefix = \"\",\n  id = prefix + name,\n  key = id,\n  options,\n  values,\n  ...props\n}) => {\n  if (values && !props.value) props.value = values[name] || \"\";\n  const className = cClass;\n  const commonProps = { ...props, label, key, id, name };\n  if (!options) return Text({ ...commonProps, placeholder, className });\n  return props.type === \"select\"\n    ? SelectBox({ ...commonProps, options, className })\n    : TickBoxes({ ...commonProps, options });\n};\n\n/**\n * Creates form element\n * @param {Object} f Form properties\n * @param {function} [f.onSubmit] callback will receive object containing values entered after submit suppressed\n * @param {function} [f.children] child elements (as in React for example)\n * @param {function} [f....props] form properties/attributes\n * @return {Object} vnode\n *\n * @example\n *\n *     <Form onSubmit={({email}) => console.log({email})}>\n *        <Field placeholder=\"email\"> </Field>\n *     <Form>\n */\n\nconst Form = ({ onSubmit, children, ...props }) => {\n  /*\n  const [values, setValues] = useState({});\n  const onChange = ({ target: { name, value } }) =>\n    setValues((values) => {\n      //console.log({ name, value });\n      return { ...values, [name]: value };\n    });\n  const withState = (e) => React.cloneElement(e, { values: values });\n  */\n  if (onSubmit)\n    props.onSubmit = (e) => {\n      e.preventDefault();\n      onSubmit(parseFormInputs(e.target));\n    };\n\n  return h(\"form\", props, ...children);\n\n  /*\n  return h(\"form\", { ...props, onChange, children: props.children.map(withState) });\n  */\n};\n\n/** Expand field definition from shorthand: simple string, or array\n *\n * @param {string|array|Object} field shorthand field definition\n * @return {Object} field definition as an argument for Field()\n *\n */\nconst expandShorthand = (field) => {\n  let f = field;\n  if (typeof f === \"string\") return { ezTitle: f };\n  if (Array.isArray(f)) f = { ezTitle: f[0], options: f[1] };\n  if (Array.isArray(f.options))\n    return {\n      ...f,\n      options: f.options.map((option) =>\n        typeof option === \"string\" ? { label: option } : option\n      ),\n    };\n  return f;\n};\n\n/** Parse form values, eg for onSubmit. Exposed for testing purposes.\n *\n * @param {Object} elements event.target\n * @return {Object} event target values in a convenient form\n *\n * @example\n *\n * example return value:\n *\n * {\n *  \"inputs\": {\n *   \"text_input_with_value\": \"quick brown fox\",\n *   \"textarea\": \"quick brown fox jumped.\\nYes he did.\\n\",\n *   \"checkboxes\": [\n *     \"Apple\"\n *   ],\n *   \"radios\": \"Pear\",\n *   \"select_fruit\": [\n *     \"apple\",\n *     \"Pear\"\n *   ]\n *  }\n * }\n */\nconst parseFormInputs = ({ elements }) => {\n  const result = {};\n  for (const { type, name, checked, selectedOptions, value } of elements) {\n    if (type === \"select-multiple\") {\n      result[name] = [];\n      for (const { value } of selectedOptions) result[name].push(value);\n    } else if (type === \"checkbox\") {\n      if (!result[name]) result[name] = [];\n      if (checked) result[name].push(value);\n    } else if (type !== \"submit\" && (!(type === \"radio\") || checked)) {\n      result[name] = value;\n    }\n  }\n  return result;\n};\n\nexport { Field, Form, expandShorthand, parseFormInputs };\n"],"names":["h","React","createElement","FormGroup","children","props","className","inferType","name","toLowerCase","find","v","includes","Field","ezTitle","label","placeholder","replace","prefix","id","key","options","values","value","commonProps","type","xChildren","map","cProps","i","htmlFor","SelectBox","p","TickBox","TickBoxes","Text","Form","onSubmit","e","preventDefault","parseFormInputs","target","expandShorthand","field","f","Array","isArray","option","elements","result","checked","selectedOptions","push"],"mappings":"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"}