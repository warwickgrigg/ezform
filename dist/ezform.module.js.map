{"version":3,"file":"ezform.module.js","sources":["../src/ezform.js"],"sourcesContent":["/** @module ezform */\n\nimport React from \"react\";\n//import { useState } from \"react\";\nconst h = React.createElement;\nconst iClass = \"custom-control-input\";\nconst lClass = \"custom-control-label\";\nconst gClass = \"form-group\";\nconst cClass = \"form-control\";\nconst bClass = \"btn btn-primary\";\n\n/*\nconst omit = (fields) => (obj) =>\n  Object.fromEntries(\n    Object.entries(obj).filter(([key]) => !fields.includes(key))\n  );\n*/\n\nconst FormGroup = ({ children, ...props }) =>\n  h(\"div\", { className: gClass, ...props }, ...children);\n\nconst TickBox = ({ type, name, id, label, value = label, ...props }) => {\n  const className = `custom-control custom-${type} custom-control-inline`;\n  return h(\n    \"div\",\n    { className, key: id },\n    h(\"input\", { id, name, className: iClass, type, value, ...props }),\n    h(\"label\", { htmlFor: id, className: lClass }, label)\n  );\n};\n\nconst TickBoxes = ({ type, name, id, key, label, options, ...p }) => {\n  type = type || \"checkbox\";\n  const xChildren = options.map((cProps, i) =>\n    TickBox({ type, name, ...p, id: id + \"_\" + i, ...cProps })\n  );\n\n  return FormGroup({\n    key,\n    children: [label && h(\"label\", null, label), h(\"div\", null, ...xChildren)],\n  });\n};\n\nconst SelectBox = ({ name, key, label, options, ...props }) => {\n  delete props.type;\n  const xChildren = options.map(({ label, value = label, ...cProps }, i) => {\n    const id = props.id + \"_\" + i;\n    return h(\"option\", { id, key: id, value, ...cProps }, label);\n  });\n\n  return FormGroup({\n    key,\n    children: [\n      label && h(\"label\", { htmlFor: props.id }, label),\n      h(\"select\", { name, ...props }, ...xChildren),\n    ],\n  });\n};\n\nconst inferType = (name) => {\n  name = name.toLowerCase();\n  const types = [\"number\", \"email\", \"textarea\", \"submit\"];\n  return types.find((v) => name.includes(v)) || \"text\";\n};\n\nconst Text = ({ name, type = inferType(name), key, label, ...props }) => {\n  //type = type || inferType(name);\n  const children =\n    type === \"submit\"\n      ? [h(\"input\", { type, name, ...props, value: label, className: bClass })]\n      : [\n          label && h(\"label\", { htmlFor: props.id }, label),\n          type === \"textarea\"\n            ? //? h(\"textarea\", { name, ...omit([\"value\"])(props) }, props.value)\n              h(\"textarea\", { name, ...props })\n            : h(\"input\", { type, name, ...props }),\n        ];\n  return FormGroup({ key, children });\n};\n\n/**\n * High level user input field inc optional label, multiple options etc\n * @param {Object} f field proerties\n * @param {string} [f.ezTitle] meaningful title for field\n * @param {string} [f.label = f.ezTitle] label element\n * @param {string} [f.placeholder = f.ezTitle] placeholder property\n * @param {string} [f.name] name property - defaults to ezTitle or placeholder snake-cased\n * @param {string} [f.prefix = \"\"] id prefix (eg. for use if >=2 forms on page)\n * @param {string} [f.id = f.prefix + f.name] id for input/textarea; number will be suffixed  for options' ids\n * @param {string} [f.type] html input type or \"textarea\"\n * @param {Object[]} [f.options] array of options' attributes for checkbox, radio and select\n * @param {Object} [f.values] container for a controlled form's input values\n * @param {Object} [f....props] other dom/vdom/react attributes\n * @return {Object} vnode with optional label\n *\n * @example Field({placeholder: \"email\"})\n *\n * @example Field({placeholder: \"email\", style:{color: red}})\n *\n * @example <Field placeholder=\"email\"></Field>\n *\n */\nconst Field = ({\n  ezTitle,\n  label = ezTitle,\n  placeholder = ezTitle,\n  name = (ezTitle || placeholder).replace(/ /g, \"_\").toLowerCase(),\n  prefix = \"\",\n  id = prefix + name,\n  key = id,\n  options,\n  values,\n  ...props\n}) => {\n  if (values && !props.value) props.value = values[name] || \"\";\n  const className = cClass;\n  const commonProps = { ...props, label, key, id, name };\n  if (!options) return Text({ ...commonProps, placeholder, className });\n  return props.type === \"select\"\n    ? SelectBox({ ...commonProps, options, className })\n    : TickBoxes({ ...commonProps, options });\n};\n\n/**\n * Creates form element\n * @param {Object} f Form properties\n * @param {function} [f.onSubmit] callback will receive object containing values entered after submit suppressed\n * @param {function} [f.children] child elements (as in React for example)\n * @param {function} [f....props] form properties/attributes\n * @return {Object} vnode\n *\n * @example\n *\n *     <Form onSubmit={({email}) => console.log({email})}>\n *        <Field placeholder=\"email\"> </Field>\n *     <Form>\n */\n\nconst Form = ({ onSubmit, children, ...props }) => {\n  /*\n  const [values, setValues] = useState({});\n  const onChange = ({ target: { name, value } }) =>\n    setValues((values) => {\n      //console.log({ name, value });\n      return { ...values, [name]: value };\n    });\n  const withState = (e) => React.cloneElement(e, { values: values });\n  */\n  if (onSubmit)\n    props.onSubmit = (e) => {\n      e.preventDefault();\n      onSubmit(parseFormInputs(e.target));\n    };\n\n  return h(\"form\", props, ...children);\n\n  /*\n  return h(\"form\", { ...props, onChange, children: props.children.map(withState) });\n  */\n};\n\n/** Expand field definition from shorthand: simple string, or array\n *\n * @param {string|array|Object} field shorthand field definition\n * @return {Object} field definition as an argument for Field()\n *\n */\nconst expandShorthand = (field) => {\n  let f = field;\n  if (typeof f === \"string\") return { ezTitle: f };\n  if (Array.isArray(f)) f = { ezTitle: f[0], options: f[1] };\n  if (Array.isArray(f.options))\n    return {\n      ...f,\n      options: f.options.map((option) =>\n        typeof option === \"string\" ? { label: option } : option\n      ),\n    };\n  return f;\n};\n\n/** Parse form values, eg for onSubmit. Exposed for testing purposes.\n *\n * @param {Object} elements event.target\n * @return {Object} event target values in a convenient form\n *\n * @example\n *\n * example return value:\n *\n * {\n *  \"inputs\": {\n *   \"text_input_with_value\": \"quick brown fox\",\n *   \"textarea\": \"quick brown fox jumped.\\nYes he did.\\n\",\n *   \"checkboxes\": [\n *     \"Apple\"\n *   ],\n *   \"radios\": \"Pear\",\n *   \"select_fruit\": [\n *     \"apple\",\n *     \"Pear\"\n *   ]\n *  }\n * }\n */\nconst parseFormInputs = ({ elements }) => {\n  const result = {};\n  for (const { type, name, checked, selectedOptions, value } of elements) {\n    if (type === \"select-multiple\") {\n      result[name] = [];\n      for (const { value } of selectedOptions) result[name].push(value);\n    } else if (type === \"checkbox\") {\n      if (!result[name]) result[name] = [];\n      if (checked) result[name].push(value);\n    } else if (type !== \"submit\" && (!(type === \"radio\") || checked)) {\n      result[name] = value;\n    }\n  }\n  return result;\n};\n\nexport { Field, Form, expandShorthand, parseFormInputs };\n"],"names":["h","React","createElement","FormGroup","children","props","className","Field","ezTitle","label","placeholder","name","replace","toLowerCase","prefix","id","key","options","values","value","commonProps","type","xChildren","map","i","cProps","htmlFor","SelectBox","p","TickBox","TickBoxes","find","v","includes","inferType","Text","Form","onSubmit","e","preventDefault","parseFormInputs","target","expandShorthand","field","f","Array","isArray","option","result","elements","checked","selectedOptions","push"],"mappings":"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"}