{"version":3,"file":"ezform.module.js","sources":["../src/ezform.js"],"sourcesContent":["/** @module ezform */\n\nimport React from \"react\";\n\n// import { useState } from \"react\";\nconst h = React.createElement;\nconst gClass = \"form-group\";\nconst bClass = \"btn btn-primary\";\nconst cClass = \"form-control\"; // input, select, textarea\nconst checkClass = \"form-check form-check-inline\";\nconst checkiClass = \"form-check-input\";\nconst checklClass = \"form-check-label\";\n// const iClass = \"custom-control-input\";\n// const lClass = \"custom-control-label\";\n// const checkClass = \"custom-control custom-checkbox custom-control-inline\";\n// const radioClass = \"custom-control custom-radio custom-control-inline\";\n\n/*\nconst omit = (fields) => (obj) =>\n  Object.fromEntries(\n    Object.entries(obj).filter(([key]) => !fields.includes(key))\n  );\n*/\n\n/*\nconst toChildren = (children) =>\n  Array.isArray(children) ? children : [children];\n*/\n\nconst FormGroup = ({ children, ...props }) =>\n  h(\"div\", { className: gClass, ...props }, ...[].concat(children));\n\nconst TickBox = ({ type, name, id, label, value = label, ...props }) =>\n  // const className = `custom-control custom-${type} custom-control-inline`;\n  h(\n    \"div\",\n    { className: checkClass, key: id },\n    h(\"input\", { id, name, className: checkiClass, type, value, ...props }),\n    h(\"label\", { htmlFor: id, className: checklClass }, label)\n  );\nconst TickBoxes = ({ type, name, id, key, label, options, ...p }) => {\n  // eslint-disable-next-line no-param-reassign\n  type = type || \"checkbox\";\n  const xChildren = options.map((cProps, i) =>\n    TickBox({ type, name, ...p, id: `${id}_${i}`, ...cProps })\n  );\n\n  return FormGroup({\n    key,\n    children: [label && h(\"label\", null, label), h(\"div\", null, ...xChildren)],\n  });\n};\n\nconst SelectBox = ({ name, key, label, options, ...props }) => {\n  // eslint-disable-next-line no-param-reassign\n  delete props.type;\n  // eslint-disable-next-line no-shadow\n  const xChildren = options.map(({ label, value = label, ...cProps }, i) => {\n    const id = `${props.id}_${i}`;\n    return h(\"option\", { id, key: id, value, ...cProps }, label);\n  });\n\n  return FormGroup({\n    key,\n    children: [\n      label && h(\"label\", { htmlFor: props.id }, label),\n      h(\"select\", { name, ...props }, ...xChildren),\n    ],\n  });\n};\n\nconst inferType = (name) => {\n  // eslint-disable-next-line no-param-reassign\n  name = name.toLowerCase();\n  const types = [\"number\", \"email\", \"textarea\", \"submit\"];\n  return types.find((v) => name.includes(v)) || \"text\";\n};\n\nconst Text = ({ name, type = inferType(name), key, label, ...props }) => {\n  // type = type || inferType(name);\n  const children =\n    type === \"submit\"\n      ? [h(\"input\", { type, name, ...props, value: label, className: bClass })]\n      : [\n          label && h(\"label\", { htmlFor: props.id }, label),\n          type === \"textarea\"\n            ? // ? h(\"textarea\", { name, ...omit([\"value\"])(props) }, props.value)\n              h(\"textarea\", { name, ...props })\n            : h(\"input\", { type, name, ...props }),\n        ];\n  return FormGroup({ key, children });\n};\n\n/**\n * High level user input field inc optional label, multiple options etc\n * @param {Object} f field proerties\n * @param {string} [f.ezTitle] meaningful title for field\n * @param {string} [f.label = f.ezTitle] label element\n * @param {string} [f.placeholder = f.ezTitle] placeholder property\n * @param {string} [f.name] name property - defaults to ezTitle or placeholder snake-cased\n * @param {string} [f.prefix = \"\"] id prefix (eg. for use if >=2 forms on page)\n * @param {string} [f.id = f.prefix + f.name] id for input/textarea; number will be suffixed  for options' ids\n * @param {string} [f.type] html input type or \"textarea\"\n * @param {Object[]} [f.options] array of options' attributes for checkbox, radio and select\n * @param {Object} [f....props] other dom/vdom/react attributes\n * @return {Object} vnode with optional label\n *\n * @example Field({placeholder: \"email\"})\n *\n * @example Field({placeholder: \"email\", style:{color: red}})\n *\n * @example <Field placeholder=\"email\"></Field>\n *\n */\nconst Field = ({\n  ezTitle,\n  label = ezTitle,\n  placeholder = ezTitle,\n  name = (ezTitle || placeholder).replace(/ /g, \"_\").toLowerCase(),\n  prefix = \"\",\n  id = prefix + name,\n  key = id,\n  options,\n  ...props\n}) => {\n  const className = cClass;\n  const commonProps = { ...props, label, key, id, name };\n  if (!options) return Text({ ...commonProps, placeholder, className });\n  return props.type === \"select\"\n    ? SelectBox({ ...commonProps, options, className })\n    : TickBoxes({ ...commonProps, options });\n};\n\n/**\n * Creates form element\n * @param {Object} f Form properties\n * @param {function} [f.onSubmit] callback will receive object containing values entered after submit suppressed\n * @param {function} [f.children] child elements (as in React for example)\n * @param {function} [f....props] form properties/attributes\n * @return {Object} vnode\n *\n * @example\n *\n *     <Form onSubmit={({email}) => console.log({email})}>\n *        <Field placeholder=\"email\"/>\n *     <Form>\n */\n\nconst Form = ({ onSubmit, children, ...props }) => {\n  if (onSubmit)\n    // eslint-disable-next-line no-param-reassign\n    props.onSubmit = (e) => {\n      e.preventDefault();\n      // eslint-disable-next-line no-use-before-define\n      onSubmit(parseFormInputs(e.target));\n    };\n\n  return h(\"form\", props, ...[].concat(children));\n};\n\n/** Expand field definition from shorthand: simple string, or array\n *\n * @param {string|array|Object} field shorthand field definition\n * @return {Object} field definition as an argument for Field()\n *\n */\nconst expandShorthand = (field) => {\n  let f = field;\n  if (typeof f === \"string\") return { ezTitle: f };\n  if (Array.isArray(f)) f = { ezTitle: f[0], options: f[1] };\n  if (Array.isArray(f.options))\n    return {\n      ...f,\n      options: f.options.map((option) =>\n        typeof option === \"string\" ? { label: option } : option\n      ),\n    };\n  return f;\n};\n\n/** Parse form values, eg for onSubmit. Exposed for testing purposes.\n *\n * @param {Object} elements event.target\n * @return {Object} event target values in a convenient form\n *\n * @example\n *\n * example return value:\n *\n * {\n *  \"inputs\": {\n *   \"text_input_with_value\": \"quick brown fox\",\n *   \"textarea\": \"quick brown fox jumped.\\nYes he did.\\n\",\n *   \"checkboxes\": [\n *     \"Apple\"\n *   ],\n *   \"radios\": \"Pear\",\n *   \"select_fruit\": [\n *     \"apple\",\n *     \"Pear\"\n *   ]\n *  }\n * }\n */\nconst parseFormInputs = ({ elements }) => {\n  const result = {};\n  // eslint-disable-next-line no-restricted-syntax\n  for (const { type, name, checked, selectedOptions, value } of elements) {\n    if (type === \"select-multiple\") {\n      result[name] = [];\n      // eslint-disable-next-line no-restricted-syntax, no-shadow\n      for (const { value } of selectedOptions) result[name].push(value);\n    } else if (type === \"checkbox\") {\n      if (!result[name]) result[name] = [];\n      if (checked) result[name].push(value);\n    } else if (type !== \"submit\" && (!(type === \"radio\") || checked)) {\n      result[name] = value;\n    }\n  }\n  return result;\n};\n\nexport { Field, Form, expandShorthand, parseFormInputs };\n"],"names":["h","React","createElement","FormGroup","children","props","className","concat","Field","ezTitle","label","placeholder","name","replace","toLowerCase","prefix","id","key","options","commonProps","type","xChildren","map","i","value","cProps","htmlFor","SelectBox","p","TickBox","TickBoxes","find","v","includes","inferType","Text","Form","onSubmit","e","preventDefault","parseFormInputs","target","expandShorthand","field","f","Array","isArray","option","result","elements","checked","selectedOptions","push"],"mappings":"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"}