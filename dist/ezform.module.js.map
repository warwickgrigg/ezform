{"version":3,"file":"ezform.module.js","sources":["../src/ezform.js"],"sourcesContent":["import React from \"react\";\nconst h = React.createElement;\nconst iClass = \"custom-control-input\";\nconst lClass = \"custom-control-label\";\nconst gClass = \"form-group\";\nconst cClass = \"form-control\";\nconst bClass = \"btn btn-primary\";\n\nconst parseFormInputs = ({ elements }) => {\n  const result = {};\n  for (const { type, name, checked, selectedOptions, value } of elements) {\n    if (type === \"select-multiple\") {\n      result[name] = [];\n      for (const { value } of selectedOptions) result[name].push(value);\n    } else if (type === \"checkbox\") {\n      if (!result[name]) result[name] = [];\n      if (checked) result[name].push(value);\n    } else if (type !== \"submit\" && (!(type === \"radio\") || checked)) {\n      result[name] = value;\n    }\n  }\n  return result;\n};\n\nconst omit = (fields) => (obj) =>\n  Object.fromEntries(\n    Object.entries(obj).filter(([key]) => !fields.includes(key))\n  );\n\nconst fromExtraTerse = (field) => {\n  let f = field;\n  if (typeof f === \"string\") return { ezTitle: f };\n  if (Array.isArray(f)) f = { ezTitle: f[0], children: f[1] };\n  if (Array.isArray(f.children))\n    return {\n      ...f,\n      children: f.children.map((option) =>\n        typeof option === \"string\" ? { label: option } : option\n      ),\n    };\n  return f;\n};\n\n/**\n * @typedef ezFormFactory\n * @function\n * @param {function} h createElement function (eg. React.createElement)\n * @return {{Form: function(Object): Array<Array<T>| T>, push: function(Array<T>, T): Array<T>}} an object containing the functions to manage the queue\n */\n\n/** @type {SharedLib.PriorityQueueFactory} */\n//const ezForm = (h, { idPrefix = \"\" } = {}) => {\n//const idP = idPrefix;\nconst FormGroup = ({ children, ...props }) =>\n  h(\"div\", { className: gClass, ...props }, ...children);\n\nconst TickBox = ({ type, name, id, label, value = label, ...props }) => {\n  const className = `custom-control custom-${type} custom-control-inline`;\n  return h(\n    \"div\",\n    { className, key: id },\n    h(\"input\", { id, name, className: iClass, type, value, ...props }),\n    h(\"label\", { htmlFor: id, className: lClass }, label)\n  );\n};\n\nconst TickBoxes = ({ type, name, idP, key, label, children, ...props }) => {\n  type = type || \"checkbox\";\n  const xChildren = children.map((cProps, i) =>\n    TickBox({ type, name, ...props, id: idP + name + \"_\" + i, ...cProps })\n  );\n\n  return FormGroup({\n    key,\n    children: [label && h(\"label\", null, label), h(\"div\", null, ...xChildren)],\n  });\n};\n\nconst SelectBox = ({ name, idP, key, label, children, ...props }) => {\n  delete props.type;\n  const xChildren = children.map(({ label, value = label, ...cProps }, i) => {\n    const id = idP + name + \"_\" + i;\n    return h(\"option\", { id, key: id, value, ...cProps }, label);\n  });\n\n  return FormGroup({\n    key,\n    children: [\n      label && h(\"label\", { htmlFor: props.id }, label),\n      h(\"select\", { name, ...props }, ...xChildren),\n    ],\n  });\n};\n\nconst inferType = (name) => {\n  name = name.toLowerCase();\n  const types = [\"number\", \"email\", \"textarea\", \"submit\"];\n  return types.find((v) => name.includes(v)) || \"text\";\n};\n/** This is a description of the Text function. */\nconst Text = ({ name, type = inferType(name), key, label, ...props }) => {\n  //type = type || inferType(name);\n  const children =\n    type === \"submit\"\n      ? [\n          h(\"input\", {\n            type,\n            name,\n            ...props,\n            value: label,\n            className: bClass,\n          }),\n        ]\n      : [\n          label && h(\"label\", { htmlFor: props.id }, label),\n          type === \"textarea\"\n            ? h(\"textarea\", { name, ...omit([\"value\"])(props) }, props.value)\n            : h(\"input\", { type, name, ...props }),\n        ];\n  return FormGroup({ key, children });\n};\n\n/**\n * High level user input field inc optional label, multiple options etc\n * @function ezField~Field\n * @param {Object} f field proerties\n * @param {Object} [f.ezState] container for properties for intermediate values\n * @param {string} [f.ezTitle] meaningful title for field\n * @param {string} [f.type] html input type plus \"select-multiple\"\n * @param {string[]} [f.options] options for checkbox, radio, select and select-multiple types\n * @param {string} [f.label = f.ezTitle] label element\n * @param {string} [f.placeholder = f.ezTitle] placeholder property\n * @param {string} [f.name] name property - defaults to ezTitle or placeholder snake-cased\n * @return {Object} vnode with optional label\n *\n * @example Field({placeholder: email})\n *\n */\nconst Field = ({\n  ezTitle,\n  ezState,\n  label = ezTitle,\n  placeholder = ezTitle,\n  name = (ezTitle || placeholder).replace(/ /g, \"_\").toLowerCase(),\n  idP = \"\",\n  id = idP + name,\n  key = id,\n  children,\n  ...props\n}) => {\n  if (ezState && !props.value) props.value = ezState[name] || \"\";\n  const className = cClass;\n  const derivedProps = { ...props, label, key, id, name, idP };\n  if (children) {\n    return props.type === \"select\"\n      ? SelectBox({ ...derivedProps, children, className })\n      : TickBoxes({ ...derivedProps, children });\n  } else {\n    return Text({ ...derivedProps, placeholder, className });\n  }\n};\n\n/**\n * Creates form element\n * @param {function} onSubmit callback\n * @return {string} A good string\n *\n * @example\n *\n *     <Form onSubmit={({email}) => console.log({email})}>\n *        <Field\n */\n\nconst Form = ({ onSubmit, ...props }) => {\n  if (onSubmit)\n    props.onSubmit = (e) => {\n      e.preventDefault();\n      onSubmit(parseFormInputs(e.target));\n    };\n  return h(\"form\", props);\n};\n\nexport { Field, Form, fromExtraTerse, parseFormInputs };\n"],"names":["h","React","createElement","parseFormInputs","result","elements","type","name","checked","selectedOptions","value","push","fromExtraTerse","field","f","ezTitle","Array","isArray","children","map","option","label","FormGroup","props","className","Field","ezState","placeholder","replace","toLowerCase","idP","id","key","derivedProps","xChildren","i","cProps","htmlFor","SelectBox","TickBox","TickBoxes","fields","find","v","includes","inferType","obj","Object","fromEntries","entries","filter","Text","Form","onSubmit","e","preventDefault","target"],"mappings":"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"}