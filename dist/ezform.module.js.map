{"version":3,"file":"ezform.module.js","sources":["../src/ezform.js"],"sourcesContent":["import React from \"react\";\n//import { useState } from \"react\";\nconst h = React.createElement;\nconst iClass = \"custom-control-input\";\nconst lClass = \"custom-control-label\";\nconst gClass = \"form-group\";\nconst cClass = \"form-control\";\nconst bClass = \"btn btn-primary\";\n\nconst parseFormInputs = ({ elements }) => {\n  const result = {};\n  for (const { type, name, checked, selectedOptions, value } of elements) {\n    if (type === \"select-multiple\") {\n      result[name] = [];\n      for (const { value } of selectedOptions) result[name].push(value);\n    } else if (type === \"checkbox\") {\n      if (!result[name]) result[name] = [];\n      if (checked) result[name].push(value);\n    } else if (type !== \"submit\" && (!(type === \"radio\") || checked)) {\n      result[name] = value;\n    }\n  }\n  return result;\n};\n\n/*\nconst omit = (fields) => (obj) =>\n  Object.fromEntries(\n    Object.entries(obj).filter(([key]) => !fields.includes(key))\n  );\n*/\n\nconst expandShorthand = (field) => {\n  let f = field;\n  if (typeof f === \"string\") return { ezTitle: f };\n  if (Array.isArray(f)) f = { ezTitle: f[0], options: f[1] };\n  if (Array.isArray(f.options))\n    return {\n      ...f,\n      options: f.options.map((option) =>\n        typeof option === \"string\" ? { label: option } : option\n      ),\n    };\n  return f;\n};\n\nconst FormGroup = ({ children, ...props }) =>\n  h(\"div\", { className: gClass, ...props }, ...children);\n\nconst TickBox = ({ type, name, id, label, value = label, ...props }) => {\n  const className = `custom-control custom-${type} custom-control-inline`;\n  return h(\n    \"div\",\n    { className, key: id },\n    h(\"input\", { id, name, className: iClass, type, value, ...props }),\n    h(\"label\", { htmlFor: id, className: lClass }, label)\n  );\n};\n\nconst TickBoxes = ({ type, name, id, key, label, options, ...p }) => {\n  type = type || \"checkbox\";\n  const xChildren = options.map((cProps, i) =>\n    TickBox({ type, name, ...p, id: id + \"_\" + i, ...cProps })\n  );\n\n  return FormGroup({\n    key,\n    children: [label && h(\"label\", null, label), h(\"div\", null, ...xChildren)],\n  });\n};\n\nconst SelectBox = ({ name, key, label, options, ...props }) => {\n  delete props.type;\n  const xChildren = options.map(({ label, value = label, ...cProps }, i) => {\n    const id = props.id + \"_\" + i;\n    return h(\"option\", { id, key: id, value, ...cProps }, label);\n  });\n\n  return FormGroup({\n    key,\n    children: [\n      label && h(\"label\", { htmlFor: props.id }, label),\n      h(\"select\", { name, ...props }, ...xChildren),\n    ],\n  });\n};\n\nconst inferType = (name) => {\n  name = name.toLowerCase();\n  const types = [\"number\", \"email\", \"textarea\", \"submit\"];\n  return types.find((v) => name.includes(v)) || \"text\";\n};\n\nconst Text = ({ name, type = inferType(name), key, label, ...props }) => {\n  //type = type || inferType(name);\n  const children =\n    type === \"submit\"\n      ? [h(\"input\", { type, name, ...props, value: label, className: bClass })]\n      : [\n          label && h(\"label\", { htmlFor: props.id }, label),\n          type === \"textarea\"\n            ? //? h(\"textarea\", { name, ...omit([\"value\"])(props) }, props.value)\n              h(\"textarea\", { name, ...props })\n            : h(\"input\", { type, name, ...props }),\n        ];\n  return FormGroup({ key, children });\n};\n\n/**\n * High level user input field inc optional label, multiple options etc\n * @param {Object} f field proerties\n * @param {string} [f.ezTitle] meaningful title for field\n * @param {string} [f.label = f.ezTitle] label element\n * @param {string} [f.placeholder = f.ezTitle] placeholder property\n * @param {string} [f.name] name property - defaults to ezTitle or placeholder snake-cased\n * @param {string} [f.prefix = \"\"] id prefix (eg. for use if >=2 forms on page)\n * @param {string} [f.id = f.prefix + f.name] id for input/textarea; number will be suffixed  for options' ids\n * @param {string} [f.type] html input type or \"textarea\"\n * @param {Object[]} [f.options] array of options' attributes for checkbox, radio and select\n * @param {Object} [f.values] container for a controlled form's input values\n * @return {Object} vnode with optional label\n *\n * @example Field({placeholder: \"email\"})\n *\n * @example <Field placeholder=\"email\"></Field>\n *\n */\nconst Field = ({\n  ezTitle,\n  label = ezTitle,\n  placeholder = ezTitle,\n  name = (ezTitle || placeholder).replace(/ /g, \"_\").toLowerCase(),\n  prefix = \"\",\n  id = prefix + name,\n  key = id,\n  options,\n  values,\n  ...props\n}) => {\n  if (values && !props.value) props.value = values[name] || \"\";\n  const className = cClass;\n  const commonProps = { ...props, label, key, id, name };\n  if (!options) return Text({ ...commonProps, placeholder, className });\n  return props.type === \"select\"\n    ? SelectBox({ ...commonProps, options, className })\n    : TickBoxes({ ...commonProps, options });\n};\n\n/**\n * Creates form element\n * @param {function} onSubmit callback\n * @return {string} A good string\n *\n * @example\n *\n *     <Form onSubmit={({email}) => console.log({email})}>\n *        Field({placeholder: \"email\"})\n *\n * @example\n *\n *     Form({onSubmit={({email}) => console.log({email})}}, Field({placeholder: \"email\"})\n *\n */\n\nconst Form = ({ onSubmit, children, ...props }) => {\n  /*\n  const [values, setValues] = useState({});\n  const onChange = ({ target: { name, value } }) =>\n    setValues((values) => {\n      //console.log({ name, value });\n      return { ...values, [name]: value };\n    });\n  const withState = (e) => React.cloneElement(e, { values: values });\n  */\n  if (onSubmit)\n    props.onSubmit = (e) => {\n      e.preventDefault();\n      onSubmit(parseFormInputs(e.target));\n    };\n\n  return h(\"form\", props, ...children);\n\n  /*\n  return h(\"form\", { ...props, onChange, children: props.children.map(withState) });\n  */\n};\n\nexport { Field, Form, expandShorthand, parseFormInputs };\n"],"names":["h","React","createElement","parseFormInputs","result","elements","type","name","checked","selectedOptions","value","push","expandShorthand","field","f","ezTitle","Array","isArray","options","map","option","label","FormGroup","children","props","className","Field","placeholder","replace","toLowerCase","prefix","id","key","values","commonProps","xChildren","i","cProps","htmlFor","SelectBox","p","TickBox","TickBoxes","find","v","includes","inferType","Text","Form","onSubmit","e","preventDefault","target"],"mappings":"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"}