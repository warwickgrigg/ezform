{"version":3,"file":"ezform.js","sources":["../src/ezform.js"],"sourcesContent":["const iClass = \"custom-control-input\";\nconst lClass = \"custom-control-label\";\nconst gClass = \"form-group\";\nconst cClass = \"form-control\";\nconst bClass = \"btn btn-primary\";\n\nconst parseFormInputs = ({ elements }) => {\n  const result = {};\n  for (const { type, name, checked, selectedOptions, value } of elements) {\n    if (type === \"select-multiple\") {\n      result[name] = [];\n      for (const { value } of selectedOptions) result[name].push(value);\n    } else if (type === \"checkbox\") {\n      if (!result[name]) result[name] = [];\n      if (checked) result[name].push(value);\n    } else if (type !== \"submit\" && (!(type === \"radio\") || checked)) {\n      result[name] = value;\n    }\n  }\n  return result;\n};\n\nconst omit = (fields) => (obj) =>\n  Object.fromEntries(\n    Object.entries(obj).filter(([key]) => !fields.includes(key))\n  );\n\nconst fromExtraTerse = (field) => {\n  let f = field;\n  if (typeof f === \"string\") return { ezTitle: f };\n  if (Array.isArray(f)) f = { ezTitle: f[0], children: f[1] };\n  if (Array.isArray(f.children))\n    return {\n      ...f,\n      children: f.children.map((option) =>\n        typeof option === \"string\" ? { label: option } : option\n      ),\n    };\n  return f;\n};\n\n// ezForm factory export for testing and backwards compatibility\n\nconst ezForm = (h, { idPrefix = \"\" } = {}) => {\n  const idP = idPrefix;\n  const FormGroup = ({ children, ...props }) =>\n    h(\"div\", { className: gClass, ...props }, ...children);\n\n  const TickBox = ({ type, name, id, label, value = label, ...props }) => {\n    const className = `custom-control custom-${type} custom-control-inline`;\n    return h(\n      \"div\",\n      { className, key: id },\n      h(\"input\", { id, name, className: iClass, type, value, ...props }),\n      h(\"label\", { htmlFor: id, className: lClass }, label)\n    );\n  };\n\n  const TickBoxes = ({ type, name, key, label, children, ...props }) => {\n    type = type || \"checkbox\";\n    const xChildren = children.map((cProps, i) =>\n      TickBox({ type, name, ...props, id: idP + name + \"_\" + i, ...cProps })\n    );\n\n    return FormGroup({\n      key,\n      children: [\n        label && h(\"label\", null, label),\n        h(\"div\", null, ...xChildren),\n      ],\n    });\n  };\n\n  const SelectBox = ({ name, key, label, children, ...props }) => {\n    delete props.type;\n    const xChildren = children.map(({ label, value = label, ...cProps }, i) => {\n      const id = idP + name + \"_\" + i;\n      return h(\"option\", { id, key: id, value, ...cProps }, label);\n    });\n\n    return FormGroup({\n      key,\n      children: [\n        label && h(\"label\", { htmlFor: props.id }, label),\n        h(\"select\", { name, ...props }, ...xChildren),\n      ],\n    });\n  };\n\n  const inferType = (name) => {\n    name = name.toLowerCase();\n    const types = [\"number\", \"email\", \"textarea\", \"submit\"];\n    return types.find((v) => name.includes(v)) || \"text\";\n  };\n\n  const Text = ({ name, type = inferType(name), key, label, ...props }) => {\n    //type = type || inferType(name);\n    const children =\n      type === \"submit\"\n        ? [\n            h(\"input\", {\n              type,\n              name,\n              ...props,\n              value: label,\n              className: bClass,\n            }),\n          ]\n        : [\n            label && h(\"label\", { htmlFor: props.id }, label),\n            type === \"textarea\"\n              ? h(\"textarea\", { name, ...omit([\"value\"])(props) }, props.value)\n              : h(\"input\", { type, name, ...props }),\n          ];\n    return FormGroup({ key, children });\n  };\n\n  const Field = ({\n    ezTitle,\n    ezState,\n    label = ezTitle,\n    placeholder = ezTitle,\n    name = (ezTitle || placeholder).replace(/ /g, \"_\").toLowerCase(),\n    id = idP + name,\n    key = id,\n    children,\n    ...props\n  }) => {\n    if (ezState && !props.value) props.value = ezState[name] || \"\";\n    const className = cClass;\n    if (children) {\n      return props.type === \"select\"\n        ? SelectBox({ label, key, id, name, children, className, ...props })\n        : TickBoxes({ label, key, id, name, children, ...props });\n    } else {\n      return Text({ label, key, id, name, placeholder, className, ...props });\n    }\n  };\n\n  const Form = ({ onSubmit, children, ...props }) => {\n    if (onSubmit)\n      props.onSubmit = (e) => {\n        e.preventDefault();\n        onSubmit(parseFormInputs(e.target));\n      };\n    return h(\"form\", props, ...children);\n  };\n\n  return { Field, Form };\n};\n\nexport { ezForm, fromExtraTerse, parseFormInputs };\n"],"names":["parseFormInputs","result","elements","type","name","checked","selectedOptions","value","push","h","idPrefix","idP","FormGroup","children","props","className","Field","ezTitle","ezState","label","placeholder","replace","toLowerCase","id","key","xChildren","map","i","cProps","htmlFor","SelectBox","TickBox","TickBoxes","fields","find","v","includes","inferType","obj","Object","fromEntries","entries","filter","Text","Form","onSubmit","e","preventDefault","target","field","f","Array","isArray","option"],"mappings":"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"}